// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(100)
  last_name    String   @db.VarChar(100)
  email        String   @unique @db.VarChar(100)
  password     String   @db.VarChar(100)
  status       Boolean  @default(true)
  date_created DateTime @default(now())
  date_updated DateTime @updatedAt
}

model ResetPassword {
  id           Int      @id @default(autoincrement())
  token        String   @unique @default(uuid())
  date_created DateTime @default(now())
  status       Boolean  @default(false)
}

model Paint {
  id           Int                 @id @default(autoincrement())
  status       Boolean             @default(true)
  title        String              @db.VarChar()
  image        String              @db.VarChar()
  description  String              @db.VarChar()
  width        Int
  height       Int
  on_sale      Boolean             @default(false)
  date_start   DateTime
  date_finish  DateTime
  date_created DateTime            @default(now())
  date_updated DateTime            @updatedAt
  categories   CategoriesOnPaint[]
}

model PaintCategory {
  id     Int                 @id @default(autoincrement())
  name   String              @db.VarChar(50)
  paints CategoriesOnPaint[]
}

model CategoriesOnPaint {
  paint       Paint         @relation(fields: [paint_id], references: [id])
  paint_id    Int
  category    PaintCategory @relation(fields: [category_id], references: [id])
  category_id Int

  @@id([paint_id, category_id])
}

model Experience {
  id           Int                      @id @default(autoincrement())
  status       Boolean                  @default(true)
  title        String                   @db.VarChar()
  image        String                   @db.VarChar()
  description  String                   @db.VarChar()
  date_created DateTime                 @default(now())
  date_updated DateTime                 @updatedAt
  categories   CategoriesOnExperience[]
}

model ExperienceCategory {
  id          Int                      @id @default(autoincrement())
  name        String                   @db.VarChar(50)
  experiences CategoriesOnExperience[]
}

model CategoriesOnExperience {
  experience    Experience         @relation(fields: [experience_id], references: [id])
  experience_id Int
  category      ExperienceCategory @relation(fields: [category_id], references: [id])
  category_id   Int

  @@id([experience_id, category_id])
}

model Painter {
  id              Int    @id @unique
  name            String @db.VarChar(100)
  last_name       String @db.VarChar(100)
  image           String @db.VarChar()
  welcome_message String @db.VarChar(200)
  description     String @db.VarChar()
}

model Study {
  id          Int           @id @default(autoincrement())
  status      Boolean       @default(true)
  title       String        @db.VarChar(50)
  subtitle    String        @db.VarChar(50)
  description String        @db.VarChar(300)
  date_start  DateTime
  date_finish DateTime
  category    StudyCategory @relation(fields: [category_id], references: [id])
  category_id Int
}

model StudyCategory {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(50)
  study Study[]
}

model Contact {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(100)
  email     String  @db.VarChar(200)
  motive    String  @db.VarChar(300)
  message   String  @db.VarChar()
  contacted Boolean @default(false)
}
